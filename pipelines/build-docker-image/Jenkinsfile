pipeline {
    agent {
        node {
            label 'homelab'
        }
    }

    stages {
        stage('Info') {
            steps {
                echo 'Current working directory: '

                sh 'pwd'

                echo 'List of files: '

                sh 'ls -la'
            }
        }
        stage('Checkout') {
            steps {
                echo 'Checkout code from GitLab...'

                checkout([$class: 'GitSCM', branches: [[name: '*/master']], browser: [$class: 'GitLab', repoUrl: 'http://192.168.0.18:9080'], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: '4136d7ee-8c32-4f18-ad19-0db3d1d93df1', url: 'http://192.168.0.18:9080/seba/simple-rest-api-java-spring.git']]])

                echo 'Current working directory: '

                sh 'pwd'

                echo 'List of files: '

                sh 'ls -la'
            }
        }        
        stage('Build Docker image') {
            steps {
                script {
                    def customImage = docker.build("api-java:${env.BUILD_ID}")

                    customImage.inside {
                        sh 'pwd'
                        sh 'ls -la'
                    }
                    docker.withRegistry('http://192.168.0.18:5000/') {
                        customImage.push('cicd')
                    }
                }
            }
        }
        stage('Start Docker Compose') {
            steps {
                echo 'Checkout code from GitLab...'

                checkout([$class: 'GitSCM', branches: [[name: '*/master']], browser: [$class: 'GitLab', repoUrl: 'http://192.168.0.18:9080'], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: '4136d7ee-8c32-4f18-ad19-0db3d1d93df1', url: 'http://192.168.0.18:9080/seba/ci-cd.git']]])

                echo 'Current working directory: '

                sh 'pwd'

                echo 'List of files: '

                sh 'ls -la'

                echo 'Start Docker Compose'
            }
        }
    }

    post {
        success {
            mail to: "sebaczech@gmail.com",
            subject: "CI/CD platform - success pipeline - ${currentBuild.fullDisplayName}",
            body: "Everything is ok with ${env.BUILD_URL}"
        }
        failure {
            mail to: "sebaczech@gmail.com",
            subject: "CI/CD platform - failed pipeline: ${currentBuild.fullDisplayName}",
            body: "Something is wrong with ${env.BUILD_URL}"
        }
    }
}